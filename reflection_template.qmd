---
title: "STAT 331 Portfolio"
author: "Noor Karaki"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an B.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r}
#| label: wd-1-csv
childcare_data <- read_csv("data/childcare_costs.csv")
#Code from Lab 1 loading in the data
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx
agesxl <- real_xlsx(path = here::here("check-ins", "2.3-loading-data", "Ages_Data", "ages.xlsx"), sheet = "ages")
#Check-in 2.3 Importing Data
```

-   `txt`

```{r}
#| label: wd-1-txt
ages_tab <- read_table(file = here::here("Week 2","Check-ins","Ages_Data","ages_tab.txt"))
#Check-in 2.3 Importing Data
```

**WD-2: I can select necessary columns from a dataset.**

```{r}
#| label: wd-2
teacher_evals_clean <- teacher_evals %>% 
  rename(sex = gender) %>% 
  filter(no_participants >= 10) %>% 
  mutate(
    across(
      c(teacher_id,
        course_id),
           as.character))%>% 
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex)
#Code from Lab 3, Problem 5
```

Reflection: This selection demonstrates the ability to efficiently isolate relevant columns for analysis, ensuring clarity and precision and fluidly load in different types of data sets.

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r}
#| label: wd-3-numeric
teacher_evals_clean <- teacher_evals %>% 
  rename(sex = gender) %>% 
  filter(no_participants >= 10) %>% 
  mutate(
    across(
      c(teacher_id,
        course_id),
           as.character))%>% 
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex)
#Code from Lab 3, Problem 5
```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
#Revised version
 person %>%
  # Filter for rows that match either witness condition
  filter(
    (address_street_name == "Northwestern Dr" & address_number == max(address_number)) |
    (str_detect(name, "Annabel") & address_street_name == "Franklin Ave")
  ) %>% 
    inner_join(interview, by = c("id" = "person_id")) %>% 
 person
#Code from Lab 5, Problem 2
#The feedback you gave me included not needing to find the max address and save it as an object first and rather could calculate it inside the filter() and check if the address_number is equal to the max. And to collapse my steps into one pipeline.

```

-   factor

```{r}
#| label: wd-3-factor
ca_childcare <- ca_childcare |> 
  mutate(region = fct_collapse(county_name,
                               `Superior California` = c("Butte County", 
                                                         "Colusa County", 
                                                         "El Dorado County", 
                                                         "Glenn County", 
                                                         "Lassen County", 
                                                         "Modoc County", 
                                                         "Nevada County", 
                                                         "Placer County", 
                                                         "Plumas County", 
                                                         "Sacramento County", 
                                                         "Shasta County", 
                                                         "Sierra County", 
                                                         "Siskiyou County", 
                                                         "Sutter County", 
                                                         "Tehama County", 
                                                         "Yolo County", 
                                                         "Yuba County"),
                               `North Coast` = c("Del Norte County", 
                                                 "Humboldt County", 
                                                 "Lake County", 
                                                 "Mendocino County", 
                                                 "Napa County", 
                                                 "Sonoma County", 
                                                 "Trinity County"),
                               `San Francisco Bay Area` = c("Alameda County", 
                                                            "Contra Costa County",
                                                            "Marin County",
                                                            "San Francisco County",
                                                            "San Mateo County",
                                                            "Santa Clara County",
                                                            "Solano County"),
                               `Northern San Joaquin Valley` = c("Alpine County",
                                                                 "Amador County",
                                                                 "Calaveras County",
                                                                 "Madera County",
                                                                 "Mariposa County",
                                                                 "Merced County",
                                                                 "Mono County", 
                                                                 "San Joaquin County",
                                                                 "Stanislaus County",
                                                                 "Tuolumne County"),
                               `Central Coast` = c("Monterey County", 
                                                   "San Benito County", 
                                                   "San Luis Obispo County", 
                                                   "Santa Barbara County", 
                                                   "Santa Cruz County",
                                                   "Ventura County"),
                               `Southern San Joaquin Valley` = c("Fresno County",
                                                                 "Inyo County", 
                                                                 "Kern County",
                                                                 "Kings County",
                                                                 "Tulare County"),
                               `Inland Empire` = c("Riverside County",
                                                   "San Bernardino County"),
                               `Los Angeles County` = c("Los Angeles County"),
                               `Orange County` = c("Orange County"),
                               `San Diego - Imperial` = c("Imperial County",
                                                          "San Diego County")
                                )
         )
#Code from Lab 4, Problem 3
```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date
crime_scene_report %>% 
# filtering for the date January 15, 2018 in the correct format as in the data set crime_scene_report and for SQL City
  mutate(date = ymd(date)) %>%
  filter(date == ymd("2018-01-15"), city == "SQL City", type == "murder") %>%
  pull(description)

#Code from Lab 5 Number 1
#This code is revised, the feedback you gave me included to filter to only include murder reports and to use a comma in the filter if I want both conditions satisfyed.
```

**Reflection:** Filtering data by numeric and factor types has been essential in narrowing datasets to areas of interest and eliminating irrelevant data.

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric
library(dplyr)
teacher_evals_compare <- teacher_evals %>% 
  filter(question_no == 903) %>% 
  mutate(
    SET_level = if_else(SET_score_avg >= 4, "excellent", "standard"),
    sen_level = if_else(seniority <= 4, "junior", "senior")
  ) %>% 
  select(course_id, SET_level, sen_level)
teacher_evals_compare
#Code from Challenge 3, Problem 1
```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string
library(dplyr)
library(stringr)
#revised code to use stringr package
teacher_evals_clean <- teacher_evals %>% 
  rename(sex = gender) %>% 
  filter(no_participants >= 10) %>% 
  mutate(
    # Convert columns to character and format using stringr
    teacher_id = str_pad(as.character(teacher_id), width = 5, pad = "0"),
    course_id = str_to_upper(as.character(course_id))
  ) %>% 
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex)
#Code from Lab 3, Problem 5
```

-   factor (example must use functions from **forcats**)

```{r}
#| label: wd-4-factor
ca_childcare <- ca_childcare |> 
  mutate(region = fct_collapse(county_name,
                               `Superior California` = c("Butte County", 
                                                         "Colusa County", 
                                                         "El Dorado County", 
                                                         "Glenn County", 
                                                         "Lassen County", 
                                                         "Modoc County", 
                                                         "Nevada County", 
                                                         "Placer County", 
                                                         "Plumas County", 
                                                         "Sacramento County", 
                                                         "Shasta County", 
                                                         "Sierra County", 
                                                         "Siskiyou County", 
                                                         "Sutter County", 
                                                         "Tehama County", 
                                                         "Yolo County", 
                                                         "Yuba County"),
                               `North Coast` = c("Del Norte County", 
                                                 "Humboldt County", 
                                                 "Lake County", 
                                                 "Mendocino County", 
                                                 "Napa County", 
                                                 "Sonoma County", 
                                                 "Trinity County"),
                               `San Francisco Bay Area` = c("Alameda County", 
                                                            "Contra Costa County",
                                                            "Marin County",
                                                            "San Francisco County",
                                                            "San Mateo County",
                                                            "Santa Clara County",
                                                            "Solano County"),
                               `Northern San Joaquin Valley` = c("Alpine County",
                                                                 "Amador County",
                                                                 "Calaveras County",
                                                                 "Madera County",
                                                                 "Mariposa County",
                                                                 "Merced County",
                                                                 "Mono County", 
                                                                 "San Joaquin County",
                                                                 "Stanislaus County",
                                                                 "Tuolumne County"),
                               `Central Coast` = c("Monterey County", 
                                                   "San Benito County", 
                                                   "San Luis Obispo County", 
                                                   "Santa Barbara County", 
                                                   "Santa Cruz County",
                                                   "Ventura County"),
                               `Southern San Joaquin Valley` = c("Fresno County",
                                                                 "Inyo County", 
                                                                 "Kern County",
                                                                 "Kings County",
                                                                 "Tulare County"),
                               `Inland Empire` = c("Riverside County",
                                                   "San Bernardino County"),
                               `Los Angeles County` = c("Los Angeles County"),
                               `Orange County` = c("Orange County"),
                               `San Diego - Imperial` = c("Imperial County",
                                                          "San Diego County")
                                )
         )
#creating the variable "region"
#Code from Lab 4 Number 3
```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date
crime_scene_report %>% 
# filtering for the date January 15, 2018 in the correct format as in the data set crime_scene_report and for SQL City
  mutate(date = ymd(date)) %>%
  filter(date == ymd("2018-01-15"), city == "SQL City", type == "murder") %>%
  pull(description)
#modifying the date variaible 
#Code from Lab 5 Number 1
#This code is revised, the feedback you gave me included to filter to only include murder reports and to use a comma in the filter if I want both conditions satisfyed.
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r}
#| label: wd-5-left
#in my coming Lab 5 revisons 
```

-   `right_join()`

```{r}
#| label: wd-5-right
#in my coming Lab 5 revisons 
```

-   `inner_join()`

```{r}
#| label: wd-5-inner
#Revised version
 person %>%
  # Filter for rows that match either witness condition
  filter(
    (address_street_name == "Northwestern Dr" & address_number == max(address_number)) |
    (str_detect(name, "Annabel") & address_street_name == "Franklin Ave")
  ) %>% 
    inner_join(interview, by = c("id" = "person_id")) %>% 
 person
#Code from Lab 5, Problem 2
#The feedback you gave me included not needing to find the max address and save it as an object first and rather could calculate it inside the filter() and check if the address_number is equal to the max. And to collapse my steps into one pipeline.
```

-   `full_join()`

```{r}
#| label: wd-5-full
#in my coming Lab 5 revisons 
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi
#in my coming Lab 5 revisons 
```

-   `anti_join()`

```{r}
#| label: wd-6-anti
#in my coming Lab 5 revisons 
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
library(ggplot2)
library(RColorBrewer)

mycolors <- colorRampPalette(brewer.pal(8, "Accent"))(10)
#Revised plot
childcare_costs_plot <- ca_childcare %>%
  # Filtering to include only 2008 and later years 
  filter(study_year >= 2008) %>%
  
  # Pivoting the data to a long format for the age groups
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group", 
               values_to = "median_price") %>%
  mutate(age_group = fct_recode(age_group,
                                "Infant" = "mc_infant",
                                "Toddler" = "mc_toddler",
                                "Preschool" = "mc_preschool"),
         age_group = fct_relevel(age_group,
                                 "Infant",
                                 "Toddler",
                                 "Preschool"), 
         median_price = as.numeric(median_price)) %>% 
  
  # Creating the ggplot object
  ggplot(aes(x = study_year,
             y = median_price,
             color = fct_reorder2(.f = region,
                                  .x = study_year,
                                  .y = median_price))) +
  
   # Adding points for each data value
  geom_point(size = 0.5) +
  
  # Adding a smooth line for each region and shows standard error shading
  geom_smooth(method = "loess",
              se = TRUE) +
  
  # Faceting the plot by age group (Infant, Toddler, Preschool)
  facet_wrap(~ age_group) +
  theme_bw() +
  
  # Adjusting colors and other aesthetic options
  scale_color_manual(values = mycolors) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = " ", 
       color = "California Region") +
  
  # scale_x_continuous: changes the x-axis when its a continuous numeric value (year)
  # breaks = seq(start, end, # of increments) controls where the tick marks and labels show
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100,
                                500),
                     breaks = seq(100,
                                  500,
                                 by = 100)) +
  
  # Customizing
  theme(
    plot.title = element_text(hjust = 0.5,
                              face = "bold"),               # Centers title and bold 
    legend.position = "right",                              # Place the legend on the right
    legend.text = element_text(size = 7),                   # Adjust legend text size
    legend.title = element_text(size = 9),                  # Adjust legend title size
    legend.key.size = unit(1,
                           "lines"),                        # Adjust the size of the legend keys
    legend.key.height = unit(0.7,
                             "lines"),                      # Compact height of each legend key
    strip.text = element_text(face = "bold"),               # Making the facet titles bold
    axis.title.x = element_text(size = 10),                 # Adjust x-axis title
    axis.text = element_text(size = 6),                     # Adjust both axis text size 
    aspect.ratio = 1                                        # This makes each facet square-like
  )

childcare_costs_plot
#Code from Lab 4, Problem 6
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
median_income_table <- ca_childcare %>%
  filter(study_year %in% c(2008,
                           2018)) %>%
  group_by(region,
           study_year) %>%
  #added the .groups = "drop" - revision
  summarize(median_income = median(mhi_2018,
                                   na.rm = TRUE,
                                   .groups = "drop")) %>%
  pivot_wider(names_from = study_year,
              values_from = median_income,
              names_prefix = "Income_") %>% 
  arrange(Income_2018)

median_income_table
#Code from Lab 4, Problem 4
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments: I have used the here package consistently when given a data file to download and load in manually which includes for example Lab 3 setup below:

```{r}
#| label: r-1
childcare_data <- read_csv(here("data", "childcare_costs.csv"))
#Code from Lab 3, Set up step
```

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
# Creating a scatterplot with clear labels and theme for readability
ggplot(ca_childcare,
       aes(x = mhi_2018,
           y = mc_infant)) +
  geom_point() +
  geom_smooth(method = "lm",
              se = FALSE,
              color = "blue") +
  labs(title = "Childcare Costs for Infants",
       x = "Median Household Income (2018 Dollars)",
       y = "Full-time Median Weekly Price for Infants") +
  theme_minimal()
#Code from Lab 4, Problem 7
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
library(ggplot2)
library(RColorBrewer)

mycolors <- colorRampPalette(brewer.pal(8, "Accent"))(10)
#Revised plot
childcare_costs_plot <- ca_childcare %>%
  # Filtering to include only 2008 and later years 
  filter(study_year >= 2008) %>%
  
  # Pivoting the data to a long format for the age groups
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group", 
               values_to = "median_price") %>%
  mutate(age_group = fct_recode(age_group,
                                "Infant" = "mc_infant",
                                "Toddler" = "mc_toddler",
                                "Preschool" = "mc_preschool"),
         age_group = fct_relevel(age_group,
                                 "Infant",
                                 "Toddler",
                                 "Preschool"), 
         median_price = as.numeric(median_price)) %>% 
  
  # Creating the ggplot object
  ggplot(aes(x = study_year,
             y = median_price,
             color = fct_reorder2(.f = region,
                                  .x = study_year,
                                  .y = median_price))) +
  
   # Adding points for each data value
  geom_point(size = 0.5) +
  
  # Adding a smooth line for each region and shows standard error shading
  geom_smooth(method = "loess",
              se = TRUE) +
  
  # Faceting the plot by age group (Infant, Toddler, Preschool)
  facet_wrap(~ age_group) +
  theme_bw() +
  
  # Adjusting colors and other aesthetic options
  scale_color_manual(values = mycolors) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = " ", 
       color = "California Region") +
  
  # scale_x_continuous: changes the x-axis when its a continuous numeric value (year)
  # breaks = seq(start, end, # of increments) controls where the tick marks and labels show
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100,
                                500),
                     breaks = seq(100,
                                  500,
                                 by = 100)) +
  
  # Customizing
  theme(
    plot.title = element_text(hjust = 0.5,
                              face = "bold"),               # Centers title and bold 
    legend.position = "right",                              # Place the legend on the right
    legend.text = element_text(size = 7),                   # Adjust legend text size
    legend.title = element_text(size = 9),                  # Adjust legend title size
    legend.key.size = unit(1,
                           "lines"),                        # Adjust the size of the legend keys
    legend.key.height = unit(0.7,
                             "lines"),                      # Compact height of each legend key
    strip.text = element_text(face = "bold"),               # Making the facet titles bold
    axis.title.x = element_text(size = 10),                 # Adjust x-axis title
    axis.text = element_text(size = 6),                     # Adjust both axis text size 
    aspect.ratio = 1                                        # This makes each facet square-like
  )

childcare_costs_plot
#Code from Lab 4 Problem 6
```

-   Example of function formatting

```{r}
#| label: r-2-3
library(ggplot2)
library(RColorBrewer)

mycolors <- colorRampPalette(brewer.pal(8, "Accent"))(10)
#Revised plot
childcare_costs_plot <- ca_childcare %>%
  # Filtering to include only 2008 and later years 
  filter(study_year >= 2008) %>%
  
  # Pivoting the data to a long format for the age groups
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group", 
               values_to = "median_price") %>%
  mutate(age_group = fct_recode(age_group,
                                "Infant" = "mc_infant",
                                "Toddler" = "mc_toddler",
                                "Preschool" = "mc_preschool"),
         age_group = fct_relevel(age_group,
                                 "Infant",
                                 "Toddler",
                                 "Preschool"), 
         median_price = as.numeric(median_price)) %>% 
  
  # Creating the ggplot object
  ggplot(aes(x = study_year,
             y = median_price,
             color = fct_reorder2(.f = region,
                                  .x = study_year,
                                  .y = median_price))) +
  
   # Adding points for each data value
  geom_point(size = 0.5) +
  
  # Adding a smooth line for each region and shows standard error shading
  geom_smooth(method = "loess",
              se = TRUE) +
  
  # Faceting the plot by age group (Infant, Toddler, Preschool)
  facet_wrap(~ age_group) +
  theme_bw() +
  
  # Adjusting colors and other aesthetic options
  scale_color_manual(values = mycolors) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = " ", 
       color = "California Region") +
  
  # scale_x_continuous: changes the x-axis when its a continuous numeric value (year)
  # breaks = seq(start, end, # of increments) controls where the tick marks and labels show
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100,
                                500),
                     breaks = seq(100,
                                  500,
                                 by = 100)) +
  
  # Customizing
  theme(
    plot.title = element_text(hjust = 0.5,
                              face = "bold"),               # Centers title and bold 
    legend.position = "right",                              # Place the legend on the right
    legend.text = element_text(size = 7),                   # Adjust legend text size
    legend.title = element_text(size = 9),                  # Adjust legend title size
    legend.key.size = unit(1,
                           "lines"),                        # Adjust the size of the legend keys
    legend.key.height = unit(0.7,
                             "lines"),                      # Compact height of each legend key
    strip.text = element_text(face = "bold"),               # Making the facet titles bold
    axis.title.x = element_text(size = 10),                 # Adjust x-axis title
    axis.text = element_text(size = 6),                     # Adjust both axis text size 
    aspect.ratio = 1                                        # This makes each facet square-like
  )

childcare_costs_plot
#Code from Lab 4 Problem 6
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example
lowest_price_region <- ca_childcare %>%
  filter(study_year == 2018) %>%
  group_by(region) %>%
  summarize(median_price = median(mc_infant,
                                  na.rm = TRUE)) %>%
  arrange(median_price) %>% 
  #Revision made here. Orginal slice_min(median_price, n = 1), since arrange acutomatically lists the values in ascending order,the first row will contain the region with the lowest median price. Your feedback included not needing the arrange + the slice_min together
  slice(1)

lowest_price_region

#Code from Lab 4, Problem 5
```

-   Example of function stops

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

```{r}
#| label: dvs-1-num
# Scatterplot with linear regression to show relationship
ca_childcare %>%
  ggplot(aes(x = mhi_2018, y = mc_infant)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "blue") +
  labs(title = "Childcare Costs for Infants",
       x = "Median Household Income (2018 Dollars)",
       y = "Full-time Median Weekly Price for Infants") +
  theme_minimal()
#Code from Lab 4, Problem 7
```

-   at least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat
library(ggridges)
#| label: ridge plot
ggplot(data = surveys, aes(x = weight,
                           y = species)) +
  geom_density_ridges(fill = "pink", color = "black", alpha = 0.7, bandwidth = 1) +
  labs(x = "Weight (grams)",
       y = "",
       title = "Distribution of Different Rodent Sizes",
       subtitle = "Species")
#Code from Challenge 2
```

-   at least two categorical variables

```{r}
#| label: dvs-2-cat
# code chunk for Q2
library(ggplot2)

ggplot(
  teacher_evals_compare,
  aes(x = sen_level,
      fill = SET_level)) +
  geom_bar() +
  labs(
    x = "Seniority of Instructor",
    y = "",
    title = "SET Ratings Comparison by Seniority",
    subtitle = "Number of Sections"
  ) +
  scale_fill_manual(values = c("excellent" = "steelblue",
                               "standard" = "orange3"))
#categorigal variables include SET_level and Seniority of Instructor
#Code from Challenge 3 Problem 2
```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date
library(ggplot2)
library(RColorBrewer)

mycolors <- colorRampPalette(brewer.pal(8, "Accent"))(10)
#Revised plot
childcare_costs_plot <- ca_childcare %>%
  # Filtering to include only 2008 and later years 
  filter(study_year >= 2008) %>%
  
  # Pivoting the data to a long format for the age groups
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group", 
               values_to = "median_price") %>%
  mutate(age_group = fct_recode(age_group,
                                "Infant" = "mc_infant",
                                "Toddler" = "mc_toddler",
                                "Preschool" = "mc_preschool"),
         age_group = fct_relevel(age_group,
                                 "Infant",
                                 "Toddler",
                                 "Preschool"), 
         median_price = as.numeric(median_price)) %>% 
  
  # Creating the ggplot object
  ggplot(aes(x = study_year,
             y = median_price,
             color = fct_reorder2(.f = region,
                                  .x = study_year,
                                  .y = median_price))) +
  
   # Adding points for each data value
  geom_point(size = 0.5) +
  
  # Adding a smooth line for each region and shows standard error shading
  geom_smooth(method = "loess",
              se = TRUE) +
  
  # Faceting the plot by age group (Infant, Toddler, Preschool)
  facet_wrap(~ age_group) +
  theme_bw() +
  
  # Adjusting colors and other aesthetic options
  scale_color_manual(values = mycolors) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = " ", 
       color = "California Region") +
  
  # scale_x_continuous: changes the x-axis when its a continuous numeric value (year)
  # breaks = seq(start, end, # of increments) controls where the tick marks and labels show
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100,
                                500),
                     breaks = seq(100,
                                  500,
                                 by = 100)) +
  
  # Customizing
  theme(
    plot.title = element_text(hjust = 0.5,
                              face = "bold"),               # Centers title and bold 
    legend.position = "right",                              # Place the legend on the right
    legend.text = element_text(size = 7),                   # Adjust legend text size
    legend.title = element_text(size = 9),                  # Adjust legend title size
    legend.key.size = unit(1,
                           "lines"),                        # Adjust the size of the legend keys
    legend.key.height = unit(0.7,
                             "lines"),                      # Compact height of each legend key
    strip.text = element_text(face = "bold"),               # Making the facet titles bold
    axis.title.x = element_text(size = 10),                 # Adjust x-axis title
    axis.text = element_text(size = 6),                     # Adjust both axis text size 
    aspect.ratio = 1                                        # This makes each facet square-like
  )

childcare_costs_plot
#tracking the median price for center based childcare over the years
#Code from Lab 4 Problem 6
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

```{r}
#| label: dvs-2-1
ggplot(data = surveys, aes(x = species,
                           y = weight)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.2, color = "purple", alpha = 0.3) +
  labs(x = "Species",
       y = "",
       title = "Distribution of Different Rodent Sizes",
       subtitle = "Weight (grams)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#doesnt include a y-axis so people don't have to tilt their heads, 
#instead making the title extra detailed and including a subtitle for the y-axis more visually appealing
#Code from Lab 2 Problem 8
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-2
ggplot(data = surveys, aes(x = species,
                           y = weight)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.2, color = "purple", alpha = 0.3) +
  labs(x = "Species",
       y = "",
       title = "Distribution of Different Rodent Sizes",
       subtitle = "Weight (grams)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#tilted the x-axis text to be more readable
#Code from Lab 2 Problem 8
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-3
library(ggplot2)
library(RColorBrewer)

mycolors <- colorRampPalette(brewer.pal(8, "Accent"))(10)
#Revised plot
childcare_costs_plot <- ca_childcare %>%
  # Filtering to include only 2008 and later years 
  filter(study_year >= 2008) %>%
  
  # Pivoting the data to a long format for the age groups
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group", 
               values_to = "median_price") %>%
  mutate(age_group = fct_recode(age_group,
                                "Infant" = "mc_infant",
                                "Toddler" = "mc_toddler",
                                "Preschool" = "mc_preschool"),
         age_group = fct_relevel(age_group,
                                 "Infant",
                                 "Toddler",
                                 "Preschool"), 
         median_price = as.numeric(median_price)) %>% 
  
  # Creating the ggplot object
  ggplot(aes(x = study_year,
             y = median_price,
             color = fct_reorder2(.f = region,
                                  .x = study_year,
                                  .y = median_price))) +
  
   # Adding points for each data value
  geom_point(size = 0.5) +
  
  # Adding a smooth line for each region and shows standard error shading
  geom_smooth(method = "loess",
              se = TRUE) +
  
  # Faceting the plot by age group (Infant, Toddler, Preschool)
  facet_wrap(~ age_group) +
  theme_bw() +
  
  # Adjusting colors and other aesthetic options
  scale_color_manual(values = mycolors) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = " ", 
       color = "California Region") +
  
  # scale_x_continuous: changes the x-axis when its a continuous numeric value (year)
  # breaks = seq(start, end, # of increments) controls where the tick marks and labels show
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100,
                                500),
                     breaks = seq(100,
                                  500,
                                 by = 100)) +
  
  # Customizing
  theme(
    plot.title = element_text(hjust = 0.5,
                              face = "bold"),               # Centers title and bold 
    legend.position = "right",                              # Place the legend on the right
    legend.text = element_text(size = 7),                   # Adjust legend text size
    legend.title = element_text(size = 9),                  # Adjust legend title size
    legend.key.size = unit(1,
                           "lines"),                        # Adjust the size of the legend keys
    legend.key.height = unit(0.7,
                             "lines"),                      # Compact height of each legend key
    strip.text = element_text(face = "bold"),               # Making the facet titles bold
    axis.title.x = element_text(size = 10),                 # Adjust x-axis title
    axis.text = element_text(size = 6),                     # Adjust both axis text size 
    aspect.ratio = 1                                        # This makes each facet square-like
  )

childcare_costs_plot
#Code from Lab 4 Problem 6
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

```{r}
#| label: dvs-3-1
library(ggplot2)
library(RColorBrewer)

mycolors <- colorRampPalette(brewer.pal(8, "Accent"))(10)
#Revised plot
childcare_costs_plot <- ca_childcare %>%
  # Filtering to include only 2008 and later years 
  filter(study_year >= 2008) %>%
  
  # Pivoting the data to a long format for the age groups
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group", 
               values_to = "median_price") %>%
  mutate(age_group = fct_recode(age_group,
                                "Infant" = "mc_infant",
                                "Toddler" = "mc_toddler",
                                "Preschool" = "mc_preschool"),
         age_group = fct_relevel(age_group,
                                 "Infant",
                                 "Toddler",
                                 "Preschool"), 
         median_price = as.numeric(median_price)) %>% 
  
  # Creating the ggplot object
  ggplot(aes(x = study_year,
             y = median_price,
             color = fct_reorder2(.f = region,
                                  .x = study_year,
                                  .y = median_price))) +
  
   # Adding points for each data value
  geom_point(size = 0.5) +
  
  # Adding a smooth line for each region and shows standard error shading
  geom_smooth(method = "loess",
              se = TRUE) +
  
  # Faceting the plot by age group (Infant, Toddler, Preschool)
  facet_wrap(~ age_group) +
  theme_bw() +
  
  # Adjusting colors and other aesthetic options
  scale_color_manual(values = mycolors) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = " ", 
       color = "California Region") +
  
  # scale_x_continuous: changes the x-axis when its a continuous numeric value (year)
  # breaks = seq(start, end, # of increments) controls where the tick marks and labels show
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100,
                                500),
                     breaks = seq(100,
                                  500,
                                 by = 100)) +
  
  # Customizing
  theme(
    plot.title = element_text(hjust = 0.5,
                              face = "bold"),               # Centers title and bold 
    legend.position = "right",                              # Place the legend on the right
    legend.text = element_text(size = 7),                   # Adjust legend text size
    legend.title = element_text(size = 9),                  # Adjust legend title size
    legend.key.size = unit(1,
                           "lines"),                        # Adjust the size of the legend keys
    legend.key.height = unit(0.7,
                             "lines"),                      # Compact height of each legend key
    strip.text = element_text(face = "bold"),               # Making the facet titles bold
    axis.title.x = element_text(size = 10),                 # Adjust x-axis title
    axis.text = element_text(size = 6),                     # Adjust both axis text size 
    aspect.ratio = 1                                        # This makes each facet square-like
  )

childcare_costs_plot
#exploring the RColorBrewer package to obtain non-standard color palette
#Code from Lab 4 Problem 6
```

-   I can use annotations

```{r}
#| label: dvs-3-2
library(ggplot2)
library(RColorBrewer)

mycolors <- colorRampPalette(brewer.pal(8, "Accent"))(10)
#Revised plot
childcare_costs_plot <- ca_childcare %>%
  # Filtering to include only 2008 and later years 
  filter(study_year >= 2008) %>%
  
  # Pivoting the data to a long format for the age groups
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group", 
               values_to = "median_price") %>%
  mutate(age_group = fct_recode(age_group,
                                "Infant" = "mc_infant",
                                "Toddler" = "mc_toddler",
                                "Preschool" = "mc_preschool"),
         age_group = fct_relevel(age_group,
                                 "Infant",
                                 "Toddler",
                                 "Preschool"), 
         median_price = as.numeric(median_price)) %>% 
  
  # Creating the ggplot object
  ggplot(aes(x = study_year,
             y = median_price,
             color = fct_reorder2(.f = region,
                                  .x = study_year,
                                  .y = median_price))) +
  
   # Adding points for each data value
  geom_point(size = 0.5) +
  
  # Adding a smooth line for each region and shows standard error shading
  geom_smooth(method = "loess",
              se = TRUE) +
  
  # Faceting the plot by age group (Infant, Toddler, Preschool)
  facet_wrap(~ age_group) +
  theme_bw() +
  
  # Adjusting colors and other aesthetic options
  scale_color_manual(values = mycolors) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = " ", 
       color = "California Region") +
  
  # scale_x_continuous: changes the x-axis when its a continuous numeric value (year)
  # breaks = seq(start, end, # of increments) controls where the tick marks and labels show
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100,
                                500),
                     breaks = seq(100,
                                  500,
                                 by = 100)) +
  
  # Customizing
  theme(
    plot.title = element_text(hjust = 0.5,
                              face = "bold"),               # Centers title and bold 
    legend.position = "right",                              # Place the legend on the right
    legend.text = element_text(size = 7),                   # Adjust legend text size
    legend.title = element_text(size = 9),                  # Adjust legend title size
    legend.key.size = unit(1,
                           "lines"),                        # Adjust the size of the legend keys
    legend.key.height = unit(0.7,
                             "lines"),                      # Compact height of each legend key
    strip.text = element_text(face = "bold"),               # Making the facet titles bold
    axis.title.x = element_text(size = 10),                 # Adjust x-axis title
    axis.text = element_text(size = 6),                     # Adjust both axis text size 
    aspect.ratio = 1                                        # This makes each facet square-like
  )

childcare_costs_plot
#comments/annotations made all throughout this code chunk in order to follow steps fluidly and understand whats going on
#Code from Lab 4 Problem 6
```

-   I can be creative...

```{r}
#| label: dvs-3-3
library(ggplot2)
library(RColorBrewer)

mycolors <- colorRampPalette(brewer.pal(8, "Accent"))(10)
#Revised plot
childcare_costs_plot <- ca_childcare %>%
  # Filtering to include only 2008 and later years 
  filter(study_year >= 2008) %>%
  
  # Pivoting the data to a long format for the age groups
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group", 
               values_to = "median_price") %>%
  mutate(age_group = fct_recode(age_group,
                                "Infant" = "mc_infant",
                                "Toddler" = "mc_toddler",
                                "Preschool" = "mc_preschool"),
         age_group = fct_relevel(age_group,
                                 "Infant",
                                 "Toddler",
                                 "Preschool"), 
         median_price = as.numeric(median_price)) %>% 
  
  # Creating the ggplot object
  ggplot(aes(x = study_year,
             y = median_price,
             color = fct_reorder2(.f = region,
                                  .x = study_year,
                                  .y = median_price))) +
  
   # Adding points for each data value
  geom_point(size = 0.5) +
  
  # Adding a smooth line for each region and shows standard error shading
  geom_smooth(method = "loess",
              se = TRUE) +
  
  # Faceting the plot by age group (Infant, Toddler, Preschool)
  facet_wrap(~ age_group) +
  theme_bw() +
  
  # Adjusting colors and other aesthetic options
  scale_color_manual(values = mycolors) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = " ", 
       color = "California Region") +
  
  # scale_x_continuous: changes the x-axis when its a continuous numeric value (year)
  # breaks = seq(start, end, # of increments) controls where the tick marks and labels show
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100,
                                500),
                     breaks = seq(100,
                                  500,
                                 by = 100)) +
  
  # Customizing
  theme(
    plot.title = element_text(hjust = 0.5,
                              face = "bold"),               # Centers title and bold 
    legend.position = "right",                              # Place the legend on the right
    legend.text = element_text(size = 7),                   # Adjust legend text size
    legend.title = element_text(size = 9),                  # Adjust legend title size
    legend.key.size = unit(1,
                           "lines"),                        # Adjust the size of the legend keys
    legend.key.height = unit(0.7,
                             "lines"),                      # Compact height of each legend key
    strip.text = element_text(face = "bold"),               # Making the facet titles bold
    axis.title.x = element_text(size = 10),                 # Adjust x-axis title
    axis.text = element_text(size = 6),                     # Adjust both axis text size 
    aspect.ratio = 1                                        # This makes each facet square-like
  )

childcare_costs_plot
#exploring the RColorBrewer package to obtain non-standard color palette
#also being creative with the theme() function, finding the best theme for readability and manually adjusting text and legend sizing and spacing
#Code from Lab 4 Problem 6
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
 
teacher_evals_clean %>% 
  select(academic_degree,
         seniority,
         sex) %>% 
  distinct(academic_degree,
           seniority,
           sex,
           .keep_all = TRUE) %>% 
  summarize(
  count_academic_deg = n_distinct(academic_degree),
  count_seniority = n_distinct(seniority),
  count_sex = n_distinct(sex)
)
#Finding distinct values across three varaibles
#Code from Lab 3, Problem 8
```

-   Example using `across()`

```{r}
#| label: dvs-4-across
#revised this problem to use the across() function
teacher_evals_clean %>% 
  select(academic_degree,
         seniority,
         sex) %>% 
  distinct(academic_degree,
           seniority,
           sex,
           .keep_all = TRUE) %>% 
#across() applies n_distinct to each column listed (academic_degree, seniority, sex) to count distinct values
  summarize(
    across(
      c(academic_degree,
        seniority,
        sex), 
      ~ n_distinct(.), 
#.names = "count_{.col}" names each summary column (e.g., count_academic_degree, count_seniority, count_sex), which makes the output more readable.
      .names = "count_{.col}"
    )
  )
#Finding distinct values across three varaibles
#Code from Lab 3, Problem 8
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1
teacher_evals_clean %>% 
  summarize(
    unique_instructors = n_distinct(teacher_id),
    unique_courses = n_distinct(course_id)
  )
#Code from Lab 3, Problem 6
```

-   Example 2

```{r}
#| label: dvs-5-2
median_income_table <- ca_childcare %>%
  filter(study_year %in% c(2008,
                           2018)) %>%
  group_by(region,
           study_year) %>%
  #added the .groups = "drop" - revision
  summarize(median_income = median(mhi_2018,
                                   na.rm = TRUE,
                                   .groups = "drop")) %>%
  pivot_wider(names_from = study_year,
              values_from = median_income,
              names_prefix = "Income_") %>% 
  arrange(Income_2018)

median_income_table
#Code from Lab 4, Problem 4
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r}
#| label: dvs-6-1
median_income_table <- ca_childcare %>%
  filter(study_year %in% c(2008,
                           2018)) %>%
  group_by(region,
           study_year) %>%
  summarize(median_income = median(mhi_2018,
                                   na.rm = TRUE)) %>%
  pivot_wider(names_from = study_year,
              values_from = median_income,
              names_prefix = "Income_") %>% 
  arrange(Income_2018)

median_income_table
#including the names prefix to make table columns more clear
#Code from Lab 4, Problem 4
```

-   Example 2

```{r}
#| label: dvs-6-2
lowest_price_region <- ca_childcare %>%
  filter(study_year == 2018) %>%
  group_by(region) %>%
  summarize(median_price = median(mc_infant,
                                  na.rm = TRUE)) %>%
  slice_min(median_price,
            n = 1)

lowest_price_region
#only displaying the relevent value so the table is to the point and doesnt have any other unnessasry values
#Code from Lab 4, Problem 5
```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1
median_income_table <- ca_childcare %>%
  filter(study_year %in% c(2008,
                           2018)) %>%
  group_by(region,
           study_year) %>%
  summarize(median_income = median(mhi_2018,
                                   na.rm = TRUE)) %>%
  pivot_wider(names_from = study_year,
              values_from = median_income,
              names_prefix = "Income_") %>% 
  arrange(Income_2018)

median_income_table
#including the names prefix to make table columns more clear
#Code from Lab 4, Problem 4
```

-   Example 2

```{r}
#| label: dvs-7-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call
#Revised version
 person %>%
  # Filter for rows that match either witness condition
  filter(
    (address_street_name == "Northwestern Dr" & address_number == max(address_number)) |
    (str_detect(name, "Annabel") & address_street_name == "Franklin Ave")
  ) %>% 
    inner_join(interview, by = c("id" = "person_id")) %>% 
 person
#using only one filter function to filter for two witnesses
#From Lab 5, Problem 2
#Your feedback included not needing to find the max address and save it as an object and that I should only use one pipeline
```

-   `across()`

```{r}
#| label: pe-1-across
teacher_evals_clean <- teacher_evals %>% 
  rename(sex = gender) %>% 
  filter(no_participants >= 10) %>% 
  mutate(
    across(
      c(teacher_id,
        course_id),
           as.character))%>% 
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex)
#The across() function is used within mutate() to apply the function as.character to multiple columns (teacher_id and course_id).
#Code from Lab 3, Problem 5
```

-   `map()` functions

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Function that operates on data frames

```{r}
#| label: pe-2-2

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across
teacher_evals_clean <- teacher_evals %>% 
  rename(sex = gender) %>% 
  filter(no_participants >= 10) %>% 
  mutate(
    across(
      c(teacher_id,
        course_id),
           as.character))%>% 
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex)
#The across() function is used within mutate() to apply the function as.character to multiple columns (teacher_id and course_id).
#Code from Lab 3, Problem 5
```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1
lowest_price_region <- ca_childcare %>%
  filter(study_year == 2018) %>%
  group_by(region) %>%
  summarize(median_price = median(mc_infant,
                                  na.rm = TRUE)) %>%
  slice_min(median_price,
            n = 1)

lowest_price_region
#Code from Lab 4, Problem 5
```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2
library(ggplot2)
library(RColorBrewer)

mycolors <- colorRampPalette(brewer.pal(8, "Accent"))(10)
#Revised plot
childcare_costs_plot <- ca_childcare %>%
  # Filtering to include only 2008 and later years 
  filter(study_year >= 2008) %>%
  
  # Pivoting the data to a long format for the age groups
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group", 
               values_to = "median_price") %>%
  mutate(age_group = fct_recode(age_group,
                                "Infant" = "mc_infant",
                                "Toddler" = "mc_toddler",
                                "Preschool" = "mc_preschool"),
         age_group = fct_relevel(age_group,
                                 "Infant",
                                 "Toddler",
                                 "Preschool"), 
         median_price = as.numeric(median_price)) %>% 
  
  # Creating the ggplot object
  ggplot(aes(x = study_year,
             y = median_price,
             color = fct_reorder2(.f = region,
                                  .x = study_year,
                                  .y = median_price))) +
  
   # Adding points for each data value
  geom_point(size = 0.5) +
  
  # Adding a smooth line for each region and shows standard error shading
  geom_smooth(method = "loess",
              se = TRUE) +
  
  # Faceting the plot by age group (Infant, Toddler, Preschool)
  facet_wrap(~ age_group) +
  theme_bw() +
  
  # Adjusting colors and other aesthetic options
  scale_color_manual(values = mycolors) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = " ", 
       color = "California Region") +
  
  # scale_x_continuous: changes the x-axis when its a continuous numeric value (year)
  # breaks = seq(start, end, # of increments) controls where the tick marks and labels show
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100,
                                500),
                     breaks = seq(100,
                                  500,
                                 by = 100)) +
  
  # Customizing
  theme(
    plot.title = element_text(hjust = 0.5,
                              face = "bold"),               # Centers title and bold 
    legend.position = "right",                              # Place the legend on the right
    legend.text = element_text(size = 7),                   # Adjust legend text size
    legend.title = element_text(size = 9),                  # Adjust legend title size
    legend.key.size = unit(1,
                           "lines"),                        # Adjust the size of the legend keys
    legend.key.height = unit(0.7,
                             "lines"),                      # Compact height of each legend key
    strip.text = element_text(face = "bold"),               # Making the facet titles bold
    axis.title.x = element_text(size = 10),                 # Adjust x-axis title
    axis.text = element_text(size = 6),                     # Adjust both axis text size 
    aspect.ratio = 1                                        # This makes each facet square-like
  )

childcare_costs_plot
#connecting multiple data wrangling pipelines to a ggplot()
#Code from Lab 4 Problem 6
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1
# Conducting a linear regression to analyze relationship between income and infant costs
lm_model <- lm(mc_infant ~ mhi_2018, data = ca_childcare)
summary(lm_model)
#Code from Lab 4, Problem 7
```

-   Example 2

```{r}
#| label: dsm-2-2
species_mod <- aov(weight ~ species, data = surveys)
summary(species_mod)
#using ANOVA
#Code from Lab 2, Problem 17
```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

Throughout the course I revised my thinking contiunously as I learned more about what makes good code. As I discovered new functions, packages and how to think through code prior to writing; I would learn by making mistakes and rethinking my steps to make revisions. Being mindful of things such as tidy and efficent code, helped elevate my skill and ability to produce professional looking R code. All the revisions that are made in my portfolio were made in past lab revisions or just changed to fit the learning objectives (which are noted in the code comments). I am still making revisions to Lab 5 in which will fulfill much of the functions under some of the learning objectives such as semi_join, anti_join, right_join and left_join.

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

I extended my thinking throughtout the course by being exposed to more and more material and logic behind certain functions. In code there is several ways to do the same things, people will prefer different methods and packages over others and it really comes down to personal preference onto how one codes. Given the freedom that is present in coding, I also learned throughout the course fundamental aspects that all coders share which could be for example the importance of tidy code and making the goal of working towards making your code as efficient and reproducible as possible. Specifically I extended my thinking with the code examples I provided in my portfolio by displaying my best work and even adding onto previous code to help incorperate the functions in the learning objective if I had not yet used them. Putting my portfolio together helped point out in which learning objectives I could do some more exploring such as using the map() function, branching out to new kinds of joins and possibly thinking of ways to be more creative with table making.

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

![](images/clipboard-373345026.png){width="303"}

![](images/clipboard-930952531.png){width="286"}

![](images/clipboard-1368157050.png){width="284"}

![](images/clipboard-522234621.png){width="283"}

I think the Discord chat is awesome! I realized that even people asking questions they have indirectly helped me because sometimes it was the same question I had. Acknowledging the usefulness of the chat I became more comfortable with asking any questions I had, knowing they can possibly help someone else. I also am very empathetic and am a student like everyone else so I understand the frustration of being confused with some of the material, so whenever I can and have a valid answer to give I try and respond to others because I know how much I would have appreciated it if I was in their place. So above are a few times I collaborated in the chat.

![](images/clipboard-3095813670.png)

I think feedback is one of the biggest ways we learn code because it's mostly likely not the case that I will read something once and automatically understand it. I believe that a lot of the true growth in learning is through making mistakes and going back to review what went wrong. The feedback I get on the homework helps guide me to be more successful just as the peer code reviewing does. Knowing how powerful this is I give my full attention and thoughtfulness when writing my code reviews for my peers, I am proud of all the reviews I have done but the one above in particular because of the time I spent on it.

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->

A really big personal moral of mine is to always treat others with kindness and care. As a collaborator I think I did a good job of being supportive and welcoming, throughout the course being with different pairs every week helped my comfortably grow with voicing my ideas to new people. I have had great experiences with all the partners I had throughout the course, as I felt that team success and learning were my priorities.
